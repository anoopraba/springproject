package com.StudentResults.Controller;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.StudentDetails.Entity.StudentDetails;
import com.StudentMarkSheet.Entity.StudentMarkSheet;
import com.StudentResults.MarkSheet;
import com.StudentResults.Student;
import com.StudentResults.Entity.StudentResults;
import com.StudentResults.Services.StudentResultsServices;

@RestController
public class StudentResultsController {
	@Autowired
	RestTemplate rt;
	@Autowired
	StudentResultsServices resSer;

	@PostMapping("/setResults")
	public String setResults(@RequestBody StudentResults res) {
		return resSer.setResults(res);
	}

	@GetMapping("/getFinalMarks")
	public List<StudentResults> getFinalMarks() {
		return resSer.getFinalMarks();
	}

	@GetMapping("/getFinalMarkByRoll/{rollNumber}")
	public StudentResults getFinalMarkByRoll(@PathVariable int rollNumber) {
		return resSer.getFinalMarkByRoll(rollNumber);
	}

//	@PutMapping("/updateByRoll/{rollNumber}")
//	public String updateByRoll(@PathVariable int rollNumber) {
//		return resSer.updateByRoll(rollNumber);
//	}

	@DeleteMapping("/deleteByid/{id}")
	public String deleteByid(@PathVariable int id) {
		return resSer.deleteByid(id);
	}

	@PostMapping("/setAllResult")
	public String setAllResult() {
		String url1 = "http://localhost:8080/getallbyid";
		ResponseEntity<List<Student>> r1 = rt.exchange(url1, HttpMethod.GET, null,
				new ParameterizedTypeReference<List<Student>>() {
				});
		List<Student> b1=r1.getBody();
		String url2 = "http://localhost:8081/getmarksheetDetail";
		ResponseEntity<List<MarkSheet>> r2 = rt.exchange(url2, HttpMethod.GET, null,
				new ParameterizedTypeReference<List<MarkSheet>>() {
				});
		List<MarkSheet> b2=r2.getBody();
		
		List<StudentResults> res=new ArrayList<>();
		for(Student s: b1) {
			StudentResults r= new StudentResults();
			r.setName(s.getName());
			r.setRollNumber(s.getRollNumber());
			int attendance=s.getAttendance();
			int totalMarks=0;
			int percen=0;
			int sturoll=s.getRollNumber();
			for(MarkSheet m:b2) {
				int marroll=m.getRollNumber();
				if(sturoll==marroll) {
				 totalMarks=m.getSem1Total()+m.getSem2Total();
			}
			percen=totalMarks/2;
			}
			int percen1 = totalMarks;
			if (s.getAttendance() > 90) {
				totalMarks += 5;
				percen1 = totalMarks;
				if (totalMarks > 100) {
					totalMarks = 100;
				}
			}
			
					r.setTotalMarks(totalMarks);
					r.setPercentage(percen1);
				  res.add(r);
			}
			
			return resSer.setAllResult(res);
}
	
	
	@GetMapping("/getTopper")
	public StudentResults getTopper() {
		String url1 = "http://localhost:8082/getFinalMarks";
		ResponseEntity<List<StudentResults>> resultsResponse = rt.exchange(url1, HttpMethod.GET, null,
				new ParameterizedTypeReference<List<StudentResults>>() {
				});
		List<StudentResults> allRes = resultsResponse.getBody();

		StudentResults topper = allRes.stream().max(Comparator.comparing(StudentResults::getTotalMarks)).get();
		return topper;

	}
}
































//@RestController
//public class ResultController {
//	@Autowired
//	RestTemplate rt;
//	@Autowired
//	ResultService rs;
//
//	@PostMapping("/setAllResult")
//	public String setAllResult() {
//		String url1 = "http://localhost:8080/getstudentdetails";
//		ResponseEntity<List<Student>> r1 = rt.exchange(url1, HttpMethod.GET, null,
//				new ParameterizedTypeReference<List<Student>>() {
//				});
//		List<Student> b1=r1.getBody();
//		String url2 = "http://localhost:8081/getmarksheetDetail";
//		ResponseEntity<List<MarkSheet>> r2 = rt.exchange(url2, HttpMethod.GET, null,
//				new ParameterizedTypeReference<List<MarkSheet>>() {
//				});
//		List<MarkSheet> b2=r2.getBody();
//		
//		List<Results> res=new LinkedList<>();
//		for(Student s: b1) {
//			Results r= new Results();
//			r.setName(s.getName());
//			r.setRollnumber(s.getRollnumber());
//			int attendance=s.getAttendance();
//			int totalMarks=0;
//			int percen=0;
//			int sturoll=s.getRollnumber();
//			for(MarkSheet m:b2) {
//				int marroll=m.getRollnumber();
//				if(sturoll==marroll) {
//				 totalMarks=m.getSem1Total()+m.getSem2Total();
//				}
//				percen=totalMarks/12;
//			}
//			if(attendance>=90&&attendance<=95) {
//				percen=percen+5;
//			}
//			else if(attendance==96) {
//				percen=percen+4;
//			}else if(attendance==97) {
//				percen=percen+3;
//			}else if(attendance==98) {
//				percen=percen+2;
//			}else if(attendance==99) {
//				percen=percen+1;
//			} 
//			
//					r.setTotalMarks(totalMarks);
//					r.setPercentage(percen);
//				  res.add(r);
//			}
//			
//			return rs.setAllResult(res);
//}
			




//for (Student x : stDet) {
//	String url2 = "http://localhost:8081/getMarkSheetDetailByRoll/";
//	ResponseEntity<StudentMarkSheet> markResponse = rt.exchange(url2 + x.getRollNumber(), HttpMethod.GET, null,
//			new ParameterizedTypeReference<StudentMarkSheet>() {});
//	StudentMarkSheet marksheet = markResponse.getBody();
//	int id=x.getId();
//	int rollNumber = x.getRollNumber();
//	String name = x.getName();
//	int overAll = marksheet.getSem1Total() + marksheet.getSem2Total();
//	int total = overAll / 2;
//	int percentage = total;
//	if (x.getAttendance() > 90) {
//		total += 5;
//		percentage = total;
//		if (total > 100) {
//			total = 100;
//		}
//	}
//	ResultsEntity resu = new ResultsEntity();
//	resu.setRollNumber(rollNumber);
//	resu.setName(name);
//	resu.setTotalMarks(total);
//	resu.setPercentage(percentage);
//	resultsDetails.add(resu);
//	resultsDetails.add(resu);
//}
//return rs.findResults(resultsDetails); 
//}
