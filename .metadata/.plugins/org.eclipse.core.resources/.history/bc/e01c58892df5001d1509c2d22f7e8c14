package com.StudentDetails.Controller;

public class hws {
	@Autowired
	RestTemplate rt;
	@Autowired
	ResultsServices rs;

	@PostMapping("/setResults")
	public String setResults(@RequestBody ResultsEntity res) {
		return rs.setResults(res);
	}

	@GetMapping("/getFinalMarks")
	public List<ResultsEntity> getFinalMarks() {
		return rs.getFinalMarks();
	}

	@GetMapping("/getFinalMarkByRoll/{roll}")
	public ResultsEntity getFinalMarkByRoll(@PathVariable int roll) {
		return rs.getFinalMarkByRoll(roll);
	}

	@GetMapping("/getTotalByRoll/{roll}")
	public int getTotalByRoll(@PathVariable int roll) {
		return rs.getTotalByRoll(roll);
	}

	@PutMapping("/updateByRoll/{roll}")
	public String updateByRoll(@RequestBody ResultsEntity a, @PathVariable int roll) {
		return rs.updateByRoll(a, roll);
	}

	@DeleteMapping("/deleteByid/{id}")
	public String deleteByid(@PathVariable int id) {
		return rs.deleteByid(id);
	}

	// Post in DataBase
	@PostMapping("/findResults")
	public String findResults() {
		String url1 = "http://localhost:8080/getStudentsDetails";
		ResponseEntity<List<Student>> studentResponse = rt.exchange(url1, HttpMethod.GET, null,
				new ParameterizedTypeReference<List<Student>>() {
				});
		List<Student> stDet = studentResponse.getBody();
		List<ResultsEntity> resultsDetails = new ArrayList<>();
		
		for (Student x : stDet) {
			String url2 = "http://localhost:8081/getMarkSheetDetailByRoll/";
			ResponseEntity<StudentMarkSheet> markResponse = rt.exchange(url2 + x.getRollNumber(), HttpMethod.GET, null,
					new ParameterizedTypeReference<StudentMarkSheet>() {});
			StudentMarkSheet marksheet = markResponse.getBody();
			int id=x.getId();
			int rollNumber = x.getRollNumber();
			String name = x.getName();
			int overAll = marksheet.getSem1Total() + marksheet.getSem2Total();
			int total = overAll / 2;
			int percentage = total;
			if (x.getAttendance() > 90) {
				total += 5;
				percentage = total;
				if (total > 100) {
					total = 100;
				}
			}
			ResultsEntity resu = new ResultsEntity();
			resu.setRollNumber(rollNumber);
			resu.setName(name);
			resu.setTotalMarks(total);
			resu.setPercentage(percentage);
			resultsDetails.add(resu);
			resultsDetails.add(resu);
		}
		return rs.findResults(resultsDetails); 
	}
	@GetMapping("/getTopper")
	public ResultsEntity getTopper() {
		String url1 = "http://localhost:8082/getFinalMarks";
		ResponseEntity<List<ResultsEntity>> resultsResponse = rt.exchange(url1, HttpMethod.GET, null,
				new ParameterizedTypeReference<List<ResultsEntity>>() {
				});
		List<ResultsEntity> allRes = resultsResponse.getBody();

		ResultsEntity topper = allRes.stream().max(Comparator.comparing(ResultsEntity::getTotalMarks)).get();
		return topper;

	}

	@GetMapping("/getThreeToppers")
	public List<ResultsEntity> getThreeToppers() {
		String url1 = "http://localhost:8082/getFinalMarks";
		ResponseEntity<List<ResultsEntity>> resultsResponse = rt.exchange(url1, HttpMethod.GET, null,
				new ParameterizedTypeReference<List<ResultsEntity>>() {
				});
		List<ResultsEntity> allRes = resultsResponse.getBody();

		List<ResultsEntity> topThree = allRes.stream()
				.sorted(Comparator.comparing(ResultsEntity::getTotalMarks).reversed()).limit(3)
				.collect(Collectors.toList());

		return topThree;
	}

	@GetMapping("/getStudentsByRange/{a}/{b}")
	public List<ResultsEntity> getStudentsByRange(@PathVariable int a, @PathVariable int b) {
		String url1 = "http://localhost:8082/getFinalMarks";
		ResponseEntity<List<ResultsEntity>> resultsResponse = rt.exchange(url1, HttpMethod.GET, null,
				new ParameterizedTypeReference<List<ResultsEntity>>() {
				});
		List<ResultsEntity> allRes = resultsResponse.getBody();
		

		List<ResultsEntity> byRange = allRes.stream().filter(x -> x.getTotalMarks() > a && x.getTotalMarks() < b)
				.collect(Collectors.toList());

	
		return byRange;
	}

}
